/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List media by brandId */
        get: operations["listMedia"];
        put?: never;
        /** Create a new media item */
        post: operations["createMedia"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a media item by ID */
        get: operations["getMediaById"];
        /** Update a media item by ID */
        put: operations["updateMediaById"];
        post?: never;
        /** Delete a media item by ID */
        delete: operations["deleteMediaById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Analyze a media item (image) using AI/Cognitive Services */
        post: operations["analyzeMedia"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content-generation-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List content generation templates by brandId */
        get: operations["listContentGenerationTemplates"];
        put?: never;
        /** Create a new content generation template */
        post: operations["createContentGenerationTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content-generation-templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a content generation template by ID */
        get: operations["getContentGenerationTemplateById"];
        put?: never;
        post?: never;
        /** Delete a content generation template by ID */
        delete: operations["deleteContentGenerationTemplateById"];
        options?: never;
        head?: never;
        /** Update a content generation template by ID */
        patch: operations["updateContentGenerationTemplateById"];
        trace?: never;
    };
    "/brands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List brands by userId */
        get: operations["listBrandsByUserId"];
        put?: never;
        /** Create a new brand */
        post: operations["createBrand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a brand by ID */
        get: operations["getBrandById"];
        put?: never;
        post?: never;
        /** Delete a brand by ID */
        delete: operations["deleteBrandById"];
        options?: never;
        head?: never;
        /** Update a brand by ID */
        patch: operations["updateBrandById"];
        trace?: never;
    };
    "/external/post-instagram-content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Instagram content */
        post: operations["postInstagramContent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        MediaDocument: components["schemas"]["BaseModel"] & {
            brandId?: string;
            blobUrl?: string;
            /** @enum {string} */
            mediaType?: "image" | "video";
            usageCount?: number;
            mediaMetadata?: components["schemas"]["MediaMetadata"];
        };
        ContentGenerationTemplateDocument: components["schemas"]["BaseModel"] & {
            brandId?: string;
            /**
             * Format: date-time
             * @description Last time the template was executed
             */
            lastExecutionTime?: string;
            templateInfo?: components["schemas"]["TemplateInfo"];
            schedule?: components["schemas"]["Schedule"];
            templateSettings?: components["schemas"]["TemplateSettings"];
        };
        BrandDocument: components["schemas"]["BaseModel"] & {
            userId?: string;
            brandInfo?: components["schemas"]["BrandInfo"];
            socialAccounts?: components["schemas"]["SocialAccountEntry"][];
        };
        TemplateSettings: {
            promptTemplate?: components["schemas"]["PromptTemplate"];
            contentItem?: components["schemas"]["ContentItem"];
        };
        TemplateInfo: {
            name?: string;
            description?: string;
            socialAccounts?: components["schemas"]["Platform"][];
        };
        PromptTemplate: {
            userPrompt?: string;
            variables?: {
                name?: string;
                values?: string[];
            }[];
        };
        VisualStyleObj: {
            themes?: components["schemas"]["VisualStyle"][];
        };
        VisualStyle: {
            textStyle?: components["schemas"]["TextStyle"];
            overlayBox?: components["schemas"]["OverlayBox"];
            /** @description Background color. Only relevant when the parent object's mediaType is "color".
             *     This property is required if mediaType is "color" in the parent Image or Video object, otherwise it can be omitted.
             *      */
            backgroundColor?: string;
        };
        TextStyle: {
            font?: {
                family?: string;
                size?: string;
                /** @enum {string} */
                weight?: "normal" | "bold";
                /** @enum {string} */
                style?: "normal" | "italic";
                color?: string;
            };
            outline?: {
                color?: string;
                width?: number;
            };
            /** @enum {string} */
            alignment?: "left" | "center" | "right";
            /** @default 1 */
            transparency: number;
        };
        OverlayBox: {
            color?: string;
            transparency?: number;
            /** @enum {string} */
            verticalLocation?: "top" | "middle" | "bottom";
            /** @enum {string} */
            horizontalLocation?: "left" | "middle" | "right";
        };
        /** @description Font definitions for use by both backend and frontend */
        Fonts: {
            family?: string;
            displayName?: string;
            styles?: {
                regular?: string;
                bold?: string;
                italic?: string;
                boldItalic?: string;
            };
        }[];
        SocialAccountEntry: {
            platform?: components["schemas"]["Platform"];
            account?: components["schemas"]["SocialAccount"];
        };
        SocialAccount: {
            /** @description Unique identifier for the account on the platform (e.g., userId, pageId, open_id) */
            platformAccountId: string;
            /** @description Public-facing handle (e.g., @username) */
            handle?: string;
            /** @description Username or login/display name for the account */
            username?: string;
            /** @description URL to the user's or page's profile */
            profileUrl?: string;
            /** @description OAuth access token for API access */
            accessToken: string;
            /**
             * Format: date-time
             * @description Token expiration timestamp
             */
            expiryDate?: string;
            /** @description Platform-specific additional fields (e.g., pageId for Facebook, refreshToken for TikTok) */
            extra?: {
                [key: string]: unknown;
            };
        };
        /** @enum {string} */
        Platform: "instagram" | "facebook" | "x" | "youtube" | "tiktok";
        TimeSlot: {
            /** @description Hour in 24-hour format */
            hour: number;
            /** @description Minute */
            minute: number;
            /** @description Timezone string (e.g., 'America/NewYork') */
            timezone: string;
        };
        Schedule: {
            daysOfWeek: ("monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday")[];
            timeSlots: components["schemas"]["TimeSlot"][];
        };
        VideoTemplate: {
            mediaType?: components["schemas"]["MediaType"];
            setUrl?: string | null;
            visualStyleObj?: components["schemas"]["VisualStyleObj"];
            aspectRatio?: components["schemas"]["AspectRatio"];
            /** @description Video file format (e.g., "mp4", "webm") */
            format?: string;
        } & (unknown & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            contentType: "video";
        });
        /** @enum {string} */
        MediaType: "color" | "set" | "uploaded" | "online";
        MediaMetadata: {
            fileName: string;
            description?: string;
            tags: string[];
            suggestedName?: string;
            cognitiveData: components["schemas"]["CognitiveData"];
        };
        ImagesTemplate: {
            /** @description Array of image objects */
            imageTemplates?: components["schemas"]["ImageTemplate"][];
            /** @description The exact number of images required */
            numImages?: number;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            contentType: "images";
        };
        ImageTemplate: {
            mediaType?: components["schemas"]["MediaType"];
            setUrl?: string;
            visualStyleObj?: components["schemas"]["VisualStyleObj"];
            aspectRatio?: components["schemas"]["AspectRatio"];
            /** @description Image file format (e.g., "jpeg", "png") */
            format?: string;
        };
        /**
         * @description Aspect ratio (e.g., "square", "portrait", "landscape", "story")
         * @enum {string}
         */
        AspectRatio: "square" | "portrait" | "landscape" | "story";
        Rectangle: {
            x?: number;
            y?: number;
            width?: number;
            height?: number;
        };
        CognitiveTag: {
            name?: string;
            confidence?: number;
        };
        CognitivePerson: {
            rectangle?: components["schemas"]["Rectangle"];
        };
        CognitiveObject: {
            rectangle?: components["schemas"]["Rectangle"];
        };
        CognitiveDenseCaption: {
            rectangle?: components["schemas"]["Rectangle"];
        };
        CognitiveData: {
            tags?: components["schemas"]["CognitiveTag"][];
            categories?: components["schemas"]["CognitiveCategory"][];
            objects?: components["schemas"]["CognitiveObject"][];
            caption?: components["schemas"]["CognitiveCaption"];
            denseCaptions?: components["schemas"]["CognitiveDenseCaption"][];
            brands?: components["schemas"]["CognitiveBrand"][];
            people?: components["schemas"]["CognitivePerson"][];
            rectangles?: components["schemas"]["Rectangle"][];
        };
        CognitiveCategory: {
            name?: string;
            confidence?: number;
        };
        CognitiveCaption: {
            text?: string;
            confidence?: number;
        };
        CognitiveBrand: {
            name?: string;
            confidence?: number;
        };
        Text: {
            value?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            contentType: "text";
        };
        Metadata: {
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdDate: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedDate: string;
            /** @description Whether the record is active or soft-deleted */
            isActive: boolean;
        };
        /** @description Standard error response object */
        Error: {
            /** @description Error code identifier */
            code: string;
            /** @description Human-readable error message */
            message: string;
            /** @description Optional additional error details */
            details?: string | null;
        };
        ContentItem: {
            /** @enum {string} */
            contentType?: "text" | "images" | "video";
            text?: components["schemas"]["Text"];
            videoTemplate?: components["schemas"]["VideoTemplate"];
            imagesTemplate?: components["schemas"]["ImagesTemplate"];
        } & (components["schemas"]["Text"] | components["schemas"]["VideoTemplate"] | components["schemas"]["ImagesTemplate"]);
        BrandInfo: {
            name?: string;
            description?: string;
        };
        BaseModel: {
            /** @description unique identifier for the record */
            id: string;
            metadata: components["schemas"]["Metadata"];
        };
        MediaUpdate: components["schemas"]["MediaDocument"] & {
            brandId?: string;
            blobUrl?: string;
            /** @enum {string} */
            mediaType?: "image" | "video";
            mediaMetadata?: components["schemas"]["MediaMetadata"];
        };
        /** @description Response schema for retrieving a MediaDocument by id or brandId.
         *      */
        MediaGet: components["schemas"]["MediaDocument"];
        MediaCreate: components["schemas"]["MediaDocument"] & {
            brandId: string;
            blobUrl: string;
            /** @enum {string} */
            mediaType: "image" | "video";
            mediaMetadata: components["schemas"]["MediaMetadata"];
        };
        MediaAnalyze: {
            suggestedName?: string;
            description?: string;
            tags?: components["schemas"]["CognitiveTag"][];
            categories?: components["schemas"]["CognitiveCategory"][];
            objects?: components["schemas"]["CognitiveObject"][];
            caption?: components["schemas"]["CognitiveCaption"];
            denseCaptions?: components["schemas"]["CognitiveDenseCaption"][];
            brands?: components["schemas"]["CognitiveBrand"][];
            people?: components["schemas"]["CognitivePerson"][];
            ocrText?: string;
            cognitiveData?: components["schemas"]["CognitiveData"];
        };
        /** @description Payload for updating a ContentGenerationTemplateDocument. All fields are optional and may be provided for partial update.
         *      */
        ContentGenerationTemplateUpdate: {
            brandId?: string;
            templateInfo?: components["schemas"]["TemplateInfo"];
            schedule?: components["schemas"]["Schedule"];
            templateSettings?: components["schemas"]["TemplateSettings"];
        };
        /** @description Minimal response schema for ContentGenerationTemplateDocument creation or deletion.
         *      */
        ContentGenerationTemplateResponse: {
            id?: string;
            brandId?: string;
        };
        /** @description Response schema for retrieving a ContentGenerationTemplateDocument by id or brandId.
         *      */
        ContentGenerationTemplateGet: components["schemas"]["ContentGenerationTemplateDocument"];
        /** @description Payload for creating a new ContentGenerationTemplateDocument. 'brandId' and 'templateInfo' are required.
         *      */
        ContentGenerationTemplateCreate: {
            brandId: string;
            templateInfo: components["schemas"]["TemplateInfo"];
            schedule?: components["schemas"]["Schedule"];
            templateSettings?: components["schemas"]["TemplateSettings"];
        };
        /** @description Payload for updating a Brand. All fields are optional and may be provided for partial update.
         *      */
        BrandUpdate: {
            brandInfo?: components["schemas"]["BrandInfo"];
            socialAccounts?: components["schemas"]["SocialAccountEntry"][];
        };
        /** @description Minimal response schema for Brand creation or deletion.
         *      */
        BrandResponse: {
            id?: string;
            name?: string;
        };
        /** @description Response schema for retrieving a Brand by id or userId.
         *      */
        BrandGet: components["schemas"]["BrandDocument"];
        /** @description Payload for creating a new Brand. 'brandInfo.name' and 'brandInfo.userId' is required.
         *      */
        BrandCreate: {
            brandInfo: components["schemas"]["BrandInfo"] & unknown;
        };
        ContentOrchestratorRequest: {
            /** @description The brand partition key in CosmosDB. */
            brandId: string;
            /** @description The template id in CosmosDB. */
            templateId: string;
        };
    };
    responses: {
        /** @description Authentication required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "UNAUTHORIZED",
                 *       "message": "Valid API key required"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate limit exceeded */
        RateLimitExceeded: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "RATE_LIMIT_EXCEEDED",
                 *       "message": "Rate limit exceeded"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "RESOURCE_NOT_FOUND",
                 *       "message": "The requested resource was not found"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Invalid request parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "INVALID_INPUT",
                 *       "message": "Invalid request parameters"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Pagination and sorting options */
        pagination: {
            /** @default 20 */
            limit?: number;
            /** @default 0 */
            offset?: number;
            /**
             * @default createdAt
             * @enum {string}
             */
            sortBy?: "createdAt" | "updatedAt" | "name";
            /**
             * @default desc
             * @enum {string}
             */
            sortOrder?: "asc" | "desc";
        };
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listMedia: {
        parameters: {
            query: {
                brand_id: string;
                /** @description Pagination and sorting options */
                Pagination?: components["parameters"]["pagination"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of media for a brand */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaGet"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    createMedia: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaCreate"];
            };
        };
        responses: {
            /** @description Media created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaGet"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    getMediaById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media item details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaGet"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    updateMediaById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaUpdate"];
            };
        };
        responses: {
            /** @description Media item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaGet"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    deleteMediaById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media item deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        id?: string;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    analyzeMedia: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Base64-encoded image data (optionally with data URL prefix) */
                    imageBase64: string;
                };
            };
        };
        responses: {
            /** @description Analysis result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CognitiveData"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                    };
                };
            };
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    listContentGenerationTemplates: {
        parameters: {
            query: {
                brand_id: string;
                /** @description Pagination and sorting options */
                Pagination?: components["parameters"]["pagination"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of content generation templates for a brand */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentGenerationTemplateGet"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    createContentGenerationTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentGenerationTemplateCreate"];
            };
        };
        responses: {
            /** @description Content generation template created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentGenerationTemplateResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    getContentGenerationTemplateById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Content generation template details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentGenerationTemplateGet"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    deleteContentGenerationTemplateById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Content generation template deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    updateContentGenerationTemplateById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContentGenerationTemplateUpdate"];
            };
        };
        responses: {
            /** @description Content generation template updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentGenerationTemplateResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    listBrandsByUserId: {
        parameters: {
            query: {
                userId: string;
                /** @description Pagination and sorting options */
                Pagination?: components["parameters"]["pagination"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of brands for a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrandGet"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    createBrand: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BrandCreate"];
            };
        };
        responses: {
            /** @description Brand created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrandResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    getBrandById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Brand details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrandGet"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    deleteBrandById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Brand deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    updateBrandById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BrandUpdate"];
            };
        };
        responses: {
            /** @description Brand updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrandResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["RateLimitExceeded"];
        };
    };
    postInstagramContent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
